import numpy as np
import matplotlib.pyplot as plt
from tqdm import tqdm

def f1(points):
    return 2 * points[:, 1] * points[:, 3] + points[:, 2] * (points[:, 0] - 2 * points[:, 3])

def f2(points):
    P = 600
    L = 200
    E = 2 * 10**4
    I = (
        points[:, 2] * (points[:, 0] - 2 * points[:, 3])**3 +
        2 * points[:, 1] * points[:, 3] * (4 * points[:, 3]**2 + 3 * points[:, 0] * (points[:, 0] - 2 * points[:, 3]))
    ) / 12
    return (P * L**3) / (48 * E * I)

def calculate_pareto_full(points, values_f1, values_f2):
    pareto_mask = np.ones(len(points), dtype=bool)

    for i in tqdm(range(len(points)), desc="Полный перебор для фронта Парето"):
        if not pareto_mask[i]:
            continue  # уже не Парето — пропускаем
        for j in range(len(points)):
            if i == j:
                continue
            if (values_f1[j] <= values_f1[i] and values_f2[j] <= values_f2[i]) and \
               (values_f1[j] < values_f1[i] or values_f2[j] < values_f2[i]):
                pareto_mask[i] = False
                break

    return list(zip(points[pareto_mask], values_f1[pareto_mask], values_f2[pareto_mask]))

def prov_Sigma(points):
    My = 30000
    Mz = 25000
    
    Wy = (
        points[:, 2] * (points[:, 0] - 2 * points[:, 3])**3 +
        2 * points[:, 1] * points[:, 3] * (4 * points[:, 3]**2 + 3 * points[:, 0] * (points[:, 0] - 2 * points[:, 3]))
    ) / (6 * points[:, 0])
    Wz = (
        ((points[:, 0] - 2 * points[:, 3]) * points[:, 2]**3 +
         2 * points[:, 3] * points[:, 1]**3) /
        (6 * points[:, 1])
    )
    
    sigma = 16
    return (Mz / Wz) <= sigma

# MAIN
h = 1
i_values = np.arange(10, 81, h)
j_values = np.arange(10, 51, h)
k_values = np.arange(1, 6, h)
l_values = np.arange(1, 6, h)

print("Создание сетки...")
I, J, K, L = np.meshgrid(i_values, j_values, k_values, l_values, indexing='ij')
points = np.stack([I.ravel(), J.ravel(), K.ravel(), L.ravel()], axis=1)

print("Вычисление значений функций...")
values_f1 = f1(points)
values_f2 = f2(points)

print("Применение прочностных ограничений...")
# Прочностное ограничение
sigma_mask = prov_Sigma(points)
points_sigma = points[sigma_mask]
values_f1_sigma = values_f1[sigma_mask]
values_f2_sigma = values_f2[sigma_mask]

print("Расчёт фронта Парето...")
pareto_points = calculate_pareto_full(points_sigma, values_f1_sigma, values_f2_sigma)

print("\nФронт Парето:")
for i in range(len(pareto_points)):
    print("[", pareto_points[i][1] + 0.6, ", ",pareto_points[i][2] + 0.0016, "]", ", ", sep = "")

# Визуализация
plt.scatter(values_f1, values_f2, s=2, c='lightgray', label='Все проверенные точки', zorder=3)
plt.scatter(values_f1_sigma, values_f2_sigma, s=4, c='olivedrab', label='Точки удовлетворяющие прочностному ограничению', zorder=4)
pareto_f1 = np.array([p[1] for p in pareto_points])
pareto_f2 = np.array([p[2] for p in pareto_points])
plt.scatter(pareto_f1, pareto_f2, s=10, c='red', label='Фронт Парето', zorder=5)
plt.legend()
plt.xlabel('f1')
plt.ylabel('f2')
plt.title('Фронт Парето')
plt.grid(True, zorder=0)  # Сетка на заднем плане
plt.show()
